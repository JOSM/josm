name: Java CI
env:
  junit_platform_version: '1.7.0'
  # ANT_HOME is also our ant version
  ANT_HOME: 'apache-ant-1.10.9'
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

defaults:
  run:
    shell: bash

jobs:
  createrelease:
    name: Create Release
    runs-on: ubuntu-latest
    env:
      LANG: en_US.UTF-8
    outputs: 
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      josm_revision: ${{ steps.create_revision.outputs.josm_revision }}
      josm_prerelease: ${{ steps.create_revision.outputs.josm_prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 128
      - name: Cache
        uses: actions/cache@v2.0.0
        with:
          path:  |
            ~/.ivy2/cache/
            ~/work/josm/josm/tools/
            build-tools-cache/
          key: ${{ runner.os }}-ivy2-${{ hashFiles('ivy.xml') }}
      - name: Setup java
        uses: actions/setup-java@v1.4.3
        with:
          java-version: '15'
      - name: Install ant ${{ env.ANT_HOME }} and junit ${{ env.junit_platform_version }}
        run: |
          mkdir -p build-tools-cache/
          cd build-tools-cache/
          if [ ! -f ${{ env.ANT_HOME }}-bin.tar.gz ]; then
            curl -o ${{ env.ANT_HOME }}-bin.tar.gz https://downloads.apache.org/ant/binaries/${{ env.ANT_HOME }}-bin.tar.gz
          fi
          if [ ! -f junit-platform-console-standalone-${{ env.junit_platform_version }}.jar ]; then
            curl -o junit-platform-console-standalone-${{ env.junit_platform_version }}.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/${{ env.junit_platform_version }}/junit-platform-console-standalone-${{ env.junit_platform_version }}.jar
          fi
          cd ..
          tar zxf build-tools-cache/${{ env.ANT_HOME }}-bin.tar.gz
          cp build-tools-cache/junit-platform-console-standalone-${{ env.junit_platform_version }}.jar ${{ env.ANT_HOME }}/lib/junit-platform-console-standalone-${{ env.junit_platform_version }}.jar
      - name: Print ant version, expecting ${{ env.ANT_HOME }}
        run: ${{ env.ANT_HOME }}/bin/ant -version
      - name: Set revision env variable
        id: create_revision
        run: |
          ant create-revision
          josm_revision="$(awk '/Revision/{print $2}' resources/REVISION)"
          if [[ "$josm_revision" == "$(curl --silent https://josm.openstreetmap.de/tested)" ]]; then
            sed -i '/Is-Local-Build/d' resources/REVISION
            echo "josm_prerelease=false" >> $GITHUB_ENV
            echo "::set-output name=josm_prerelease::false"
            echo "josm_release=$josm_revision-tested" >> $GITHUB_ENV
          else
            echo "josm_prerelease=true" >> $GITHUB_ENV
            echo "::set-output name=josm_prerelease::true"
            echo "josm_release=$josm_revision" >> $GITHUB_ENV
          fi
          echo "josm_revision=$josm_revision" >> $GITHUB_ENV
          echo "::set-output name=josm_revision::$josm_revision"
      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.josm_release }}
          release_name: JOSM.app release ${{ env.josm_release }}
          body: |
            JOSM.app release ${{ env.josm_release }}
          draft: false
          prerelease: ${{ env.josm_prerelease }}
  build:
    needs: createrelease
    runs-on: ${{ matrix.os }}
    env:
      LANG: en_US.UTF-8
    strategy:
      fail-fast: false
      matrix:
        # test against latest update of each major Java version, as well as specific updates of LTS versions:
        java: [8, 11, 15, 16-ea]
        os: [ubuntu-latest, macos-latest, windows-latest]
        headless: ["true", "false"]
        exclude:
          - java: 8
            os: macos-latest
          - java: 11
            os: macos-latest
          - headless: "false"
            os: macos-latest
          - headless: "false"
            os: windows-latest
    name: Java ${{ matrix.java }} on ${{ matrix.os }} with headless=${{ matrix.headless }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 32
      - name: Cache
        uses: actions/cache@v2.0.0
        with:
          path:  |
            ~/.ivy2/cache/
            ~/work/josm/josm/tools/
            build-tools-cache/
          key: ${{ runner.os }}-ivy2-${{ hashFiles('ivy.xml') }}
      - name: Setup java
        uses: actions/setup-java@v1.4.3
        with:
          java-version: ${{ matrix.java }}
      - name: Install ant ${{ env.ANT_HOME }} and junit ${{ env.junit_platform_version }}
        run: |
          mkdir -p build-tools-cache/
          cd build-tools-cache/
          if [ ! -f ${{ env.ANT_HOME }}-bin.tar.gz ]; then
            curl -o ${{ env.ANT_HOME }}-bin.tar.gz https://downloads.apache.org/ant/binaries/${{ env.ANT_HOME }}-bin.tar.gz
          fi
          if [ ! -f junit-platform-console-standalone-${{ env.junit_platform_version }}.jar ]; then
            curl -o junit-platform-console-standalone-${{ env.junit_platform_version }}.jar https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/${{ env.junit_platform_version }}/junit-platform-console-standalone-${{ env.junit_platform_version }}.jar
          fi
          cd ..
          tar zxf build-tools-cache/${{ env.ANT_HOME }}-bin.tar.gz
          cp build-tools-cache/junit-platform-console-standalone-${{ env.junit_platform_version }}.jar ${{ env.ANT_HOME }}/lib/junit-platform-console-standalone-${{ env.junit_platform_version }}.jar
      - name: Print ant version, expecting ${{ env.ANT_HOME }}
        run: ${{ env.ANT_HOME }}/bin/ant -version
      - name: Optimise images
        if: ${{ runner.os == 'macos' && always() }}
        run: |
          brew cask install imageoptim
          defaults write net.pornel.ImageOptim SvgoEnabled 1
          defaults write net.pornel.ImageOptim PngCrush2Enabled 1
          defaults write net.pornel.ImageOptim PngOutEnabled 1
          /Applications/ImageOptim.app/Contents/MacOS/ImageOptim resources/images
      - name: Build with Ant
        run: |
          ${{ env.ANT_HOME }}/bin/ant -DnoErrorProne dist
      - name: Upload jar
        if: ${{ always() && matrix.headless }}
        id: upload-jar
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.createrelease.outputs.upload_url }} # This pulls from the CREATE RELEASE job above, referencing its ID to get its outputs object, which include a `upload_url`.
          asset_path: dist/josm-custom.jar
          asset_name: JOSM-${{ runner.os}}-java${{ matrix.java }}-${{ needs.createrelease.outputs.josm_revision }}.jar
          asset_content_type: application/java-archive
      - name: Test with Ant, headless ${{ matrix.headless }}
        if: ${{ needs.createrelease.outputs.josm_prerelease }}
        run: |
          ANT="${{ env.ANT_HOME }}/bin/ant -DnoJavaFX=true test-unit-hardfail"
          if [ "${{ matrix.headless }}" == "true" ]; then
            $ANT -Dtest.headless=true
          else
            xvfb-run $ANT -Dtest.headless=false
          fi
      - name: Dump errors if failed
        if: ${{ failure() }}
        run: "grep -L ', Failures: 0, Skipped: ' test/report/*.txt | xargs cat"
      - name: Upload Ant reports
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: Ant reports for JOSM ${{ needs.createrelease.outputs.josm_revision }} on java ${{ matrix.java }} on ${{ matrix.os }} with headless=${{ matrix.headless }}
          path: test/report/*.txt
      - name: Build and package for macOS
        if: ${{ runner.os == 'macos' && always() }}
        env:
          CERT_MACOS_P12: ${{ secrets.CERT_MACOS_P12 }}
          CERT_MACOS_PW: ${{ secrets.CERT_MACOS_PW }}
          APPLE_ID_PW: ${{ secrets.APPLE_ID_PW }}
        run: |
          ./native/macosx/macos-jpackage.sh ${{ needs.createrelease.outputs.josm_revision }}
      - name: Upload app
        if: ${{ runner.os == 'macos' && always() }}
        id: upload-app
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.createrelease.outputs.upload_url }} # This pulls from the CREATE RELEASE job above, referencing its ID to get its outputs object, which include a `upload_url`.
          asset_path: app/JOSM.zip
          asset_name: JOSM-${{ runner.os}}-java${{ matrix.java }}.zip
          asset_content_type: application/zip
