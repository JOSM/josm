/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.apache.commons.compress.compressors.pack200;

import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Map;
import java.util.jar.JarOutputStream;
import java.util.jar.Pack200;

import org.apache.commons.compress.compressors.CompressorInputStream;

/**
 * An input stream that decompresses from the Pack200 format to be read
 * as any other stream.
 * 
 * <p>The {@link CompressorInputStream#getCount getCount} and {@link
 * CompressorInputStream#getBytesRead getBytesRead} methods always
 * return 0.</p>
 *
 * @NotThreadSafe
 * @since 1.3
 */
public class Pack200CompressorInputStream extends CompressorInputStream {
    private final InputStream originalInput;
    private final StreamBridge streamBridge;

    /**
     * Decompresses the given stream, caching the decompressed data in
     * memory.
     *
     * <p>When reading from a file the File-arg constructor may
     * provide better performance.</p>
     */
    public Pack200CompressorInputStream(final InputStream in)
        throws IOException {
        this(in, Pack200Strategy.IN_MEMORY);
    }

    /**
     * Decompresses the given stream using the given strategy to cache
     * the results.
     *
     * <p>When reading from a file the File-arg constructor may
     * provide better performance.</p>
     */
    public Pack200CompressorInputStream(final InputStream in,
                                        final Pack200Strategy mode)
        throws IOException {
        this(in, null, mode, null);
    }

    /**
     * Decompresses the given stream, caching the decompressed data in
     * memory and using the given properties.
     *
     * <p>When reading from a file the File-arg constructor may
     * provide better performance.</p>
     */
    public Pack200CompressorInputStream(final InputStream in,
                                        final Map<String,